# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:

    encoders:
        UserBundle\Entity\User: bcrypt

    role_hierarchy:
        ROLE_STUDENT: ROLE_USER
        ROLE_STUDENT_PARENT: ROLE_USER
        ROLE_TEACHER: ROLE_USER
        ROLE_TITULAR: ROLE_USER
        ROLE_COURSE_TITULAR: ROLE_USER
        ROLE_COORDINATOR: [ROLE_TEACHER, ROLE_TITULAR, ROLE_COURSE_TITULAR]
        ROLE_SUPER_ADMIN: [ROLE_COORDINATOR, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
      user_db:
        entity:
            class: UserBundle:User
            property: username

      student_db:
        entity:
            class: UserBundle:Student
            property: username



    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt|trans)|media|apps|bundles|images|js)/
            security: false

        student:
              pattern:  ^/student
              switch_user: true
              remember_me:
                  secret:  '%secret%'

              anonymous: ~
              provider: student_db
              guard:
                  authenticators:
                      - user.barcode_authenticator
              form_login:
                  csrf_token_generator: security.csrf.token_manager
                  check_path: /student/login
                  login_path: /student/login
              logout:
                  path:   /student/logout

        main:
            pattern: ^/
            switch_user: true
            remember_me:
                secret:  '%secret%'
            form_login:
                csrf_token_generator: security.csrf.token_manager
                check_path: /login
                login_path: /login
            logout:       true
            anonymous:    true


    access_control:
        - { path: ^/_trans, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/pages, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/generate-captcha, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/feedback/new$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/student/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/student/request-card, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/lost-password, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Student Role
        - { path: ^/student/, roles: ROLE_STUDENT }

        # Coordinator Role
        - { path: ^/manage/, roles: ROLE_COORDINATOR }
        - { path: ^/course/, roles: ROLE_COORDINATOR }

        - { path: ^/admin/, roles: ROLE_ADMIN } # admin => only the admin can access


        # Other protected pages
        - { path: ^/, roles: IS_AUTHENTICATED_REMEMBERED } # all => user should be logged. A finer grain is used with the roles at the application level
